dt[unit %like% "week", age := as.numeric(num)*7]
dt[unit %like% "day", age := as.numeric(num)]
dt[unit == "unknown", age := NA]
# paring breed
cat("dividing breed groups...\n")
dt[Breed %like% "Mix", Breed := "Mix"]
dt[!Breed %like% "Mix", Breed := "Pure"]
# simplify color
cat("simplifying colors into numbers...\n")
color_count <- vector("numeric", length = nrow(dt))
for(i in seq_along(dt[, Color])){
color_count[i] <- word_count(dt[i, Color])
}
dt[, color := .(color_count)]
# further categorizing color.....
cat("calculating color frequencies...\n")
color_f <- vector("numeric", length = nrow(dt))
dt[, Color := gsub("/", " ", Color)]
for(i in 1:nrow(dt)){
color_p <- unlist(strsplit(dt[i, Color], " "))
color_f[i] <- sum(col_freq[color_p])
}
dt[, color_freq := .(color_f)]
# drop orginal features
cat("dropping orginal features...\n")
if("OutcomeType" %in% colnames(df)){
print("training set")
dt <- dt[, .(OutcomeType, AnimalType, named, Breed, #to keep
year, month, day, weekday, age, color_f,
time, status)]
to_factors <- c("OutcomeType", "AnimalType","named", "Breed",
"status")
} else {
print("testing set")
dt <- dt[, .(AnimalType, named, Breed, year, # to keep
month, day, weekday, age, color_f, time,
status)]
to_factors <- c("AnimalType", "named", "Breed",
"status")
}
# convert to factor
for(col in to_factors){
print(paste("converting to factors...", col))
set(dt, j = col, value = as.factor(dt[[col]]))
}
for_imp <- which(is.na(dt), arr.ind = T)
cat("these missing values need to be imputed: \n")
print(for_imp)
return(dt)
}
dt.train <- clean(train)
dt.test <- clean(test)
test[, INI := substr(Name, 1, 1)]
test[INI == "3", Name := "Buster"]
test[INI == "'", Name := "Stache"]
test[INI == " ", Name := c("Joanie", "Mario")]
test[, INI := substr(Name, 1, 1)]
dt.test <- clean(test)
library(data.table)
library(Matrix)
library(xgboost)
library(ggplot2)
full_imp <- rbindlist(list(dt.train[, -1, with = F], dt.test))
head(dt.train[, -1, with = F])
imput_age <- lm(age~., data = full_imp)
summary(imput_age)
imp_age <- predict(imput_age, full_imp[which(is.na(age), arr.ind = T), ])
full_imp[is.na(full_imp[, age]), age := .(imp_age)]
#------------------------------------full training -------------------#
# create matrices
to_train <- full_imp[1:nrow(dt.train), ]
to_test <- full_imp[-c(1:nrow(dt.train)), ]
X <- sparse.model.matrix(OutcomeType~.-1,
data = to_train[, OutcomeType := dt.train[, OutcomeType]])
Y <- as.numeric(dt.train[, OutcomeType]) - 1
numclass <- range(Y)[2] + 1
# set the parameter
params <- list("objective" = "multi:softprob",
"eta" = .1,
"max_depth" = 8,
"eval_metric" = "mlogloss",
"num_class" = numclass,
"subsample" = .8)
# cross-validation
nround =200
set.seed(123)
bst.cv <-  xgb.cv(params = params, data = X, label = Y, nfold = 10,
nround = nround, verbose = T)
# cv error plot
cv_error <- bst.cv$test.mlogloss.mean
tr_error <- bst.cv$train.mlogloss.mean
min <- which.min(cv_error)
print(paste(min, cv_error[min]))
# plot
ggplot(bst.cv, aes(x = c(1: dim(bst.cv)[1])))+
geom_line(aes(y = train.mlogloss.mean), color = "green")+
geom_line(aes(y = test.mlogloss.mean), color = "blue")+
geom_vline(aes(xintercept = min), color = "red")+
xlab("number of iterations")+
ylab("mlogloss")
# feature importance
imp <- xgb.importance(dimnames(X)[[2]], model = bst)
p_imp <- xgb.plot.importance(imp[1:10])
p_imp
# train model
# apply predictions
mtest <- sparse.model.matrix(~.-1, data = to_test)
preds <- vector("list", length = 100)
for(i in 1:100){
print(paste('training model:', i))
model <- xgboost(data = X, label = Y, params = params, nround = min)
print(paste('applying prediction:', i))
preds[[i]] <- predict(model, newdata = mtest)
}
com_preds <- colMeans(do.call(rbind, preds))
result <- matrix(com_preds,nrow = 11456, ncol = numclass, byrow = T)
result <- data.frame(sample$ID, result)
sample$ID
result <- data.frame(c(1:11456), result)
colnames(result) <- c("ID",names(sample))
colnames(result) <- c("ID",outcome.level)
write.csv(result, file = "14.csv", row.names = F)
set.seed(123)
rf_models <- vector("list", length = 5)
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(OutcomeType~., data = to_train,
mtry = 4, ntree = 1000, do.trace = T)
}
library(randomForest)
set.seed(123)
rf_models <- vector("list", length = 5)
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(OutcomeType~., data = to_train,
mtry = 4, ntree = 1000, do.trace = T)
}
rf_model <- do.call(combine, rf_models)
predrf <- predict(rf_model, newdata = to_test, type = "prob")
colnames(predrf) <- c("ID",outcome.level)
predrf <- data.frame(c(1:11456), predrf)
colnames(predrf) <- c("ID",outcome.level)
write.csv(predrf, file = "15.csv", row.names = F)
str(to_train)
train = read.csv("train.csv",header = T, stringsAsFactors = F)
test = read.csv("test.csv",header = T, stringsAsFactors = F)
train$AnimalID <- NULL
train$OutcomeSubtype <- NULL
test_ID <- test$ID
test$ID <- NULL
# Add some date/time-related variables
library(lubridate)
train$DateTime <- as.POSIXct(train$DateTime)
test$DateTime <- as.POSIXct(test$DateTime)
train$year <- year(train$DateTime)
train$month <- month(train$DateTime)
train$wday <- wday(train$DateTime)
train$hour <- hour(train$DateTime)
test$year <- year(test$DateTime)
test$month <- month(test$DateTime)
test$wday <- wday(test$DateTime)
test$hour <- hour(test$DateTime)
train$DateTime <- as.numeric(train$DateTime)
test$DateTime <- as.numeric(test$DateTime)
# Write a function to convert age outcome to numeric age in days
convert <- function(age_outcome){
split <- strsplit(as.character(age_outcome), split=" ")
period <- split[[1]][2]
if (grepl("year", period)){
per_mod <- 365
} else if (grepl("month", period)){
per_mod <- 30
} else if (grepl("week", period)){
per_mod <- 7
} else
per_mod <- 1
age <- as.numeric(split[[1]][1]) * per_mod
return(age)
}
train$AgeuponOutcome <- sapply(train$AgeuponOutcome, FUN=convert)
test$AgeuponOutcome <- sapply(test$AgeuponOutcome, FUN=convert)
sort(table(train$AgeuponOutcome),decreasing = T)[1:3]
sort(table(test$AgeuponOutcome),decreasing = T)[1:3]
train[is.na(train)] <- 365  # Fill NA with 365, most common age
test[is.na(test)] <- 365 # Fill NA with 365, most common age
# Remove row with missing sex label and drop the level
train <- train[-which(train$SexuponOutcome == ""),]
train$SexuponOutcome <- droplevels(as.factor(train$SexuponOutcome))
# Add var for name length
train$name_len <- sapply(as.character(train$Name),nchar)
test$name_len <- sapply(as.character(test$Name),nchar)
train$Name <- NULL
test$Name <- NULL
# Create indicator vars for breeds and mix
train_breeds <- as.character(train$Breed)
test_breeds <- as.character(test$Breed)
all_breeds <- unique(c(train_breeds,test_breeds))
breed_words <- unique(unlist(strsplit(all_breeds, c("/| Mix"))))
for (breed in breed_words){
train[breed] <- as.numeric(grepl(breed, train_breeds))
test[breed] <- as.numeric(grepl(breed, test_breeds))
}
library(stringr)
train["crosses"] <- str_count(train$Breed, pattern="/")
test["crosses"] <- str_count(test$Breed, pattern="/")
train$Breed <- NULL
test$Breed <- NULL
# Create indicator vars for color
train_colors <- as.character(train$Color)
test_colors <- as.character(test$Color)
all_colors <- unique(c(train_colors,test_colors))
color_words <- unique(unlist(strsplit(all_colors, c("/"))))
for (color in color_words){
train[color] <- as.numeric(grepl(color, train_colors))
test[color] <- as.numeric(grepl(color, test_colors))
}
train["color_count"] <- str_count(train$Color, pattern="/")+1
test["color_count"] <- str_count(test$Color, pattern="/")+1
train$Color <- NULL
test$Color <- NULL
targets <- train$OutcomeType
test$DateTime=NULL
train$DateTime=NULL
train$AnimalType = as.factor(train$AnimalType)
train$SexuponOutcome = as.factor(train$SexuponOutcome)
test$AnimalType=as.factor(test$AnimalType)
test$SexuponOutcome =as.factor(test$SexuponOutcome)
train$DateTime=NULL
test$DateTime=NULL
train$OutcomeType = as.factor(train$OutcomeType)
targets <- train$OutcomeType
tapply(train,1,as.factor)
library(plyr)
?colwise
colwise(as.factor,train)
colwise(as.factor)(train)
train = colwise(as.factor)(train)
test = colwise(as.factor)(test)
head(train[1,])
for(i in c(4,8,9)){
train[,i] = as.numeric(train[,i])
}
for(i in c(4,8,9)){
train[,i] = as.numeric(train[,i])
test[,i-1] = as.numeric(test[,i-1])
}
set.seed(123)
library(randomForest)
colnames(train) = gsub(" ","",colnames(train))
colnames(test) = gsub(" ","",colnames(test))
rf_models <- vector("list", length = 5)
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(train$OutcomeType~., data = train, ntree = 1000)
}
?randomForest
str(train$OutcomeType)
?rfcv()
head(train[,-c(1)])
rf_model_cv = rfcv(trainx = train[,-c(1)],trainy = train$OutcomeType)
rf_model_cv
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(train$OutcomeType~., data = train)
}
colnames(predrf) <- c("ID",outcome.level)
rf_model <- do.call(combine, rf_models)
predrf <- predict(rf_model, newdata = test, type = "prob")
predrf <- data.frame(c(1:11456), predrf)
colnames(predrf) <- c("ID",outcome.level)
write.csv(predrf, file = "16.csv", row.names = F)
set.seed(123)
library(randomForest)
colnames(train) = gsub(" ","",colnames(train))
colnames(test) = gsub(" ","",colnames(test))
rf_models <- vector("list", length = 5)
#rf_model_cv = rfcv(trainx = train[,-c(1)],trainy = train$OutcomeType)
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(train$OutcomeType~., data = train)
}
for(i in 1:5){
set.seed(123)
set.seed(123)
library(randomForest)
colnames(train) = gsub(" ","",colnames(train))
colnames(test) = gsub(" ","",colnames(test))
rf_models <- vector("list", length = 5)
#rf_model_cv = rfcv(trainx = train[,-c(1)],trainy = train$OutcomeType)
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(train$OutcomeType~., data = train)
}
rf_model <- do.call(combine, rf_models)
predrf <- predict(rf_model, newdata = test, type = "prob")
train = read.csv("train.csv",header = T, stringsAsFactors = F)
test = read.csv("test.csv",header = T, stringsAsFactors = F)
train$AnimalID <- NULL
train$OutcomeSubtype <- NULL
test_ID <- test$ID
test$ID <- NULL
# Add some date/time-related variables
library(lubridate)
train$DateTime <- as.POSIXct(train$DateTime)
test$DateTime <- as.POSIXct(test$DateTime)
train$year <- year(train$DateTime)
train$month <- month(train$DateTime)
train$wday <- wday(train$DateTime)
train$hour <- hour(train$DateTime)
test$year <- year(test$DateTime)
test$month <- month(test$DateTime)
test$wday <- wday(test$DateTime)
test$hour <- hour(test$DateTime)
train$DateTime <- as.numeric(train$DateTime)
test$DateTime <- as.numeric(test$DateTime)
# Write a function to convert age outcome to numeric age in days
convert <- function(age_outcome){
split <- strsplit(as.character(age_outcome), split=" ")
period <- split[[1]][2]
if (grepl("year", period)){
per_mod <- 365
} else if (grepl("month", period)){
per_mod <- 30
} else if (grepl("week", period)){
per_mod <- 7
} else
per_mod <- 1
age <- as.numeric(split[[1]][1]) * per_mod
return(age)
}
train$AgeuponOutcome <- sapply(train$AgeuponOutcome, FUN=convert)
test$AgeuponOutcome <- sapply(test$AgeuponOutcome, FUN=convert)
sort(table(train$AgeuponOutcome),decreasing = T)[1:3]
sort(table(test$AgeuponOutcome),decreasing = T)[1:3]
train[is.na(train)] <- 365  # Fill NA with 365, most common age
test[is.na(test)] <- 365 # Fill NA with 365, most common age
# Remove row with missing sex label and drop the level
train <- train[-which(train$SexuponOutcome == ""),]
train$SexuponOutcome <- droplevels(as.factor(train$SexuponOutcome))
# Add var for name length
train$name_len <- sapply(as.character(train$Name),nchar)
test$name_len <- sapply(as.character(test$Name),nchar)
train$Name <- NULL
test$Name <- NULL
# Create indicator vars for breeds and mix
train_breeds <- as.character(train$Breed)
test_breeds <- as.character(test$Breed)
all_breeds <- unique(c(train_breeds,test_breeds))
breed_words <- unique(unlist(strsplit(all_breeds, c("/| Mix"))))
for (breed in breed_words){
train[breed] <- as.numeric(grepl(breed, train_breeds))
test[breed] <- as.numeric(grepl(breed, test_breeds))
}
library(stringr)
train["crosses"] <- str_count(train$Breed, pattern="/")
test["crosses"] <- str_count(test$Breed, pattern="/")
train$Breed <- NULL
test$Breed <- NULL
# Create indicator vars for color
train_colors <- as.character(train$Color)
test_colors <- as.character(test$Color)
all_colors <- unique(c(train_colors,test_colors))
color_words <- unique(unlist(strsplit(all_colors, c("/"))))
for (color in color_words){
train[color] <- as.numeric(grepl(color, train_colors))
test[color] <- as.numeric(grepl(color, test_colors))
}
train["color_count"] <- str_count(train$Color, pattern="/")+1
test["color_count"] <- str_count(test$Color, pattern="/")+1
train$Color <- NULL
test$Color <- NULL
train$OutcomeType = as.factor(train$OutcomeType)
targets <- train$OutcomeType
train$AnimalType = as.factor(train$AnimalType)
train$SexuponOutcome = as.factor(train$SexuponOutcome)
test$AnimalType=as.factor(test$AnimalType)
test$SexuponOutcome =as.factor(test$SexuponOutcome)
train$DateTime=NULL
test$DateTime=NULL
train = colwise(as.factor)(train)
test = colwise(as.factor)(test)
for(i in c(4,8,9)){
train[,i] = as.numeric(train[,i])
test[,i-1] = as.numeric(test[,i-1])
}
set.seed(123)
library(randomForest)
colnames(train) = gsub(" ","",colnames(train))
colnames(test) = gsub(" ","",colnames(test))
predrf <- predict(rf_model, newdata = test, type = "prob")
train = colwise(as.factor)(train)
library(plyr)
train = colwise(as.factor)(train)
test = colwise(as.factor)(test)
for(i in c(4,8,9)){
train[,i] = as.numeric(train[,i])
test[,i-1] = as.numeric(test[,i-1])
}
predrf <- predict(rf_model, newdata = test, type = "prob")
rf_models <- vector("list", length = 5)
#rf_model_cv = rfcv(trainx = train[,-c(1)],trainy = train$OutcomeType)
for(i in 1:5){
print(paste('training model:', i))
rf_models[[i]] <- randomForest(train$OutcomeType~., data = train)
}
rf_model <- do.call(combine, rf_models)
predrf <- predict(rf_model, newdata = test, type = "prob")
levels(train[,1:7])
levels(train$AnimalType)
levels(train[,2])
levels(train[,c(2:7)])
levels(train[,3])
levels(train[,4])
levels(train[,5])
levels(train[,6])
levels(train[,7])
levels(test[,1])
levels(test[,2])
levels(test[,3])
levels(test[,4])
levels(test[,5])
levels(test[,6])
x.1 = read.csv("8.csv")
x.2 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"17.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("14.csv")
x.2 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"18.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("17.csv")
x.2 = read.csv("18.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"19.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("8.csv")
x.2 = read.csv("14.csv")
x.3 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"20.csv",col.names = TRUE,row.names = FALSE,sep = ",")
mean(c(x.1[1,2],x.2[1,2],x.2[1,2]))
c(x.1[1,2],x.2[1,2],x.2[1,2])
x.1 = read.csv("8.csv")
x.2 = read.csv("14.csv")
x.3 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j],x.3[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"20.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("17.csv")
x.2 = read.csv("20.csv")
x.3 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"21.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("17.csv")
x.2 = read.csv("21.csv")
x.3 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"22.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("20.csv")
x.2 = read.csv("21.csv")
x.3 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"23.csv",col.names = TRUE,row.names = FALSE,sep = ",")
x.1 = read.csv("8.csv")
x.2 = read.csv("8.csv")
x.3 = read.csv("14.csv")
x.4 = read.csv("15.csv")
for(i in (1:11456)){
for(j in (2:6)){
x.bar[i,j] = mean(c(x.1[i,j],x.2[i,j],x.3[i,j],x.4[i,j]))
}
}
colnames(x.bar) = append("ID",outcome.level)
write.table(x.bar,"24.csv",col.names = TRUE,row.names = FALSE,sep = ",")
